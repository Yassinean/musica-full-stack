import {Component, OnInit} from '@angular/core';
import {FormBuilder, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';
import { Store } from '@ngrx/store';
import {MusicCategory, SongRequestDTO, Track} from "../../../../core/models/track.model";
import * as TrackActions from "../../../store/track/track.actions";
import {CommonModule} from "@angular/common";
import {NavbarComponent} from "../../../navbar/navbar.component";
import {ActivatedRoute, Router} from "@angular/router";
import {UploadFileService} from "../../../../core/services/upload-file/upload-file.service";

@Component({
  selector: 'app-add-track',
  standalone: true,
  imports: [
    ReactiveFormsModule, CommonModule, NavbarComponent
  ],
  templateUrl: './add-track.component.html',
  styleUrl: './add-track.component.scss'
})
export class AddTrackComponent implements OnInit {
    trackForm: FormGroup
    albumId: string | undefined
    categories = Object.values(MusicCategory)
    audioFile: File | null = null
    imageFile: File | null = null

  constructor(
    private readonly fb: FormBuilder,
    private readonly store: Store,
    private readonly route: ActivatedRoute,
    protected readonly router: Router,
    private readonly fileService: UploadFileService
  ) {
    this.trackForm = this.fb.group({
      title: ["", Validators.required],
      artist: ["", Validators.required],
      description: [""],
      duration: [0, [Validators.required, Validators.min(0)]],
      category: [MusicCategory.OTHER, Validators.required],
    })
  }
  ngOnInit() {
    this.albumId = this.route.snapshot.paramMap.get("id") ?? ""
  }

  onAudioFileChange(event: Event) {
    const element = event.currentTarget as HTMLInputElement
    const file = element.files ? element.files[0] : null
    if (file) {
      this.audioFile = file
    }
  }

  onImageFileChange(event: Event) {
    const element = event.currentTarget as HTMLInputElement
    const file = element.files ? element.files[0] : null
    if (file) {
      this.imageFile = file
    }
  }

  onSubmit() {
    if (this.trackForm.valid && this.audioFile) {
      // Upload the audio file
      this.fileService.uploadFile(this.audioFile).subscribe({
        next: (event: any) => {
          if (event.body) {
            const audioFileId = event.body.fileId;

            // If there's an image file, upload it
            if (this.imageFile) {
              this.fileService.uploadFile(this.imageFile).subscribe({
                next: (imageEvent: any) => {
                  if (imageEvent.body) {
                    const imageFileId = imageEvent.body.fileId;
                    this.submitTrack(audioFileId, imageFileId);
                  }
                },
                error: (err) => {
                  console.error('Error uploading image file:', err);
                }
              });
            } else {
              // No image file, submit track with only audio
              this.submitTrack(audioFileId, '');
            }
          }
        },
        error: (err) => {
          console.error('Error uploading audio file:', err);
        }
      });
    }
  }

  private submitTrack(audioFileId: string, imageFileId: string) {
    const formData = this.trackForm.value;

    const track: SongRequestDTO = {
      ...formData,
      id: "", // This will be generated by the backend
      albumId: this.albumId ?? "",
      audioFileId: audioFileId,
      imageUrl: imageFileId || "",
    };

    // Dispatch action to create track
    this.store.dispatch(TrackActions.createTrack({ track }));

    // Navigate back to album details
    this.router.navigate(["/albums", this.albumId]);
  }
}
